

// import React, { useState } from "react";
// import axios from "axios";
// import "../genrqteqr/GenrateQr.css";
// import Endpoint from "../../apis/Endpoint";
// import Header from "../header/Header";
// import Footer from "../footer/Footer";
// import { useNavigate } from "react-router-dom";

// export default function GenerateQR() {
//   const [loading, setLoading] = useState(false);
//   const [qrData, setQrData] = useState(null);
//   const [imageUrl, setImageUrl] = useState("");
//   const [error, setError] = useState("");
//   const navigate=useNavigate();

//   const handleGenerate = async () => {
//     setError("");
//     setLoading(true);

//     try {
//       const res = await axios.get(Endpoint.GenerateQR, { withCredentials: true });

//       console.log("Full API Response:", res.data);

//       const { filePath, qrData } = res.data; 
//       const backendBaseURL = "http://localhost:3000";

//       const clientPath = filePath.startsWith("/public")
//         ? `${backendBaseURL}${filePath.replace("/public", "")}`
//         : `${backendBaseURL}${filePath}`;

//       setQrData(qrData || null); 
//       setImageUrl(clientPath);
//     } catch (err) {
//       console.error("Generate QR error:", err);
//       setError(err?.response?.data?.message || "Failed to generate QR");
//     } finally {
//       setLoading(false);
//     }
//   };

//   return <>

//   <div className="container mt-3">
//   <button 
//     className="btn btn-outline-primary mb-3" 
//     onClick={() => navigate(-1)}
//   >
//     ⬅ Back
//   </button>
// </div>
//     <div className="qr-wrapper">
//       <div className="qr-card">
//         <h2>Generate QR Code</h2>

//         <p className="hint">
//          Teachers can generate the QR code by clicking the button below. Students can only scan it.
//         </p>

//         <div className="controls">
//           <button
//             className="btn-generate"
//             onClick={handleGenerate}
//             disabled={loading}
//           >
//             {loading ? "Generating..." : "Generate QR"}
//           </button>
//         </div>

//         {error && <div className="qr-error">{error}</div>}

//         {qrData && (
//           <div className="qr-info" style={{ color: "black", background: "#f0f0f0", padding: "10px", borderRadius: "6px" }}>
//             <h3>QR Details</h3>
//             <table style={{ width: "100%", color: "black" }}>
//               <tbody>
//                 <tr>
//                   <td>Name</td>
//                   <td>{qrData.teacherName}</td>
//                 </tr>
//                 <tr>
//                   <td>Teacher ID</td>
//                   <td>{qrData.teacherId}</td>
//                 </tr>
//                 <tr>
//                   <td>QrID</td>
//                   <td>{qrData.qrId}</td>
//                 </tr>
//                 <tr>
//                   <td>Time</td>
//                   <td>{new Date(qrData.timeStamp).toLocaleString()}</td>
//                 </tr>
//               </tbody>
//             </table>
//           </div>
//         )}

//         {imageUrl ? (
//           <div className="qr-preview">
//             <h3>Your QR Code</h3>
//             <img src={imageUrl} alt="QR Code" />
//             <div className="qr-actions">
//               <a
//                 href={imageUrl}
//                 download={`qr-${qrData?.teacherId || "code"}.png`}
//                 className="btn-download"
//               >
//                 Download
//               </a>
//               <button
//                 className="btn-refresh"
//                 onClick={() => {
//                   setImageUrl("");
//                   setQrData(null);
//                 }}
//               >
//                 Clear
//               </button>
//             </div>
//             <p className="scan-note">
//            Students can now scan this QR using the scanner page (generated by {qrData.teacherName} sir).
//             </p>
//           </div>
//         ) : (
//           <div className="qr-empty">
//             <img
//               src="/qr-placeholder.png"
//               alt="placeholder"
//               className="placeholder"
//             />
//             <small>QR preview will show here after generation</small>
//           </div>
//         )}
//       </div>
      
//     </div>
     
  
//  </>
// }




import React, { useState } from "react";
import axios from "axios";
import "../genrqteqr/GenrateQr.css";
import Endpoint from "../../apis/Endpoint";
import Header from "../header/Header";
import Footer from "../footer/Footer";
import { useNavigate } from "react-router-dom";

export default function GenerateQR() {
  const [loading, setLoading] = useState(false);
  const [qrData, setQrData] = useState(null);
  const [imageUrl, setImageUrl] = useState("");
  const [error, setError] = useState("");
  const navigate = useNavigate();

  // 
  const handleGenerate = async () => {
    setError("");
    setLoading(true);

    try {
  
      navigator.geolocation.getCurrentPosition(
 
 
//sths updaow for testing 


        async (position) => {

          const { latitude, longitude } = position.coords;
             console.log("Latitude from browser:", position.coords.latitude);
    console.log("Longitude from browser:", position.coords.longitude);
console.log("it is latitude "+latitude);
console.log("it gratitude for chaking "+longitude);

          const res = await axios.post(
            Endpoint.GenerateQR,
            {
              location: {
                latitude,
                longitude,
                radiusMeters: 50, // set your allowed radius
              },
            },
            { withCredentials: true }
          );

          console.log("Full API Response:", res.data);

          const { filePath, qrData } = res.data;
          if (!filePath || !qrData) throw new Error("Invalid QR Response from Server");

          const backendBaseURL = "http://localhost:3000";
          const clientPath = filePath.startsWith("/public")
            ? `${backendBaseURL}${filePath.replace("/public", "")}`
            : `${backendBaseURL}${filePath}`;

          setQrData(qrData);
          setImageUrl(clientPath);
          setLoading(false);
        },
        (error) => {
          console.error("Geolocation Error:", error);
          
    console.error("Geolocation error:", error.code, error.message);
  
          setError(" Location permission denied!");
          setLoading(false);
        }
      );
    } catch (err) {
      console.error("Generate QR error:", err);
      setError(err?.response?.data?.message || " Failed to generate QR");
      setLoading(false);
    }
  };

  return (
    <>
      <Header />
      <div className="container mt-3">
        <button
          className="btn btn-outline-primary mb-3"
          onClick={() => navigate(-1)}
        >
          ⬅ Back
        </button>
      </div>

      <div className="qr-wrapper">
        <div className="qr-card">
          <h2> Generate QR Code</h2>
          <p className="hint">
            Teachers can generate the QR code below. Students can only scan it.
          </p>

          <div className="controls">
            <button
              className="btn-generate"
              onClick={handleGenerate}
              disabled={loading}
            >
              {loading ? "Generating..." : " Generate QR"}
            </button>
          </div>

          {error && <div className="qr-error">{error}</div>}






            {qrData && (
          <div className="qr-info" style={{ color: "black", background: "#f0f0f0", padding: "10px", borderRadius: "6px" }}>
            <h3>QR Details</h3>
            <table style={{ width: "100%", color: "black" }}>
              <tbody>
                <tr>
                  <td>Name</td>
                  <td>{qrData.teacherName}</td>
                </tr>
                <tr>
                  <td>Teacher ID</td>
                  <td>{qrData.teacherId}</td>
                </tr>
                <tr>
                  <td>QrID</td>
                  <td>{qrData.qrId}</td>
                </tr>
                <tr>
                  <td>Time</td>
                  <td>{new Date(qrData.timeStamp).toLocaleString()}</td>
                </tr>

                   <tr>
                    <td>Latitude</td>
                    <td>{qrData.location?.latitude}</td>
                  </tr>
                  <tr>
                    <td>Longitude</td>
                    <td>{qrData.location?.longitude}</td>
                  </tr>
                  <tr>
                    <td>Radius (m)</td>
                    <td>{qrData.location?.radiusMeters}</td>
                  </tr>



              </tbody>
            </table>
          </div>
        )}

          {imageUrl ? (
            <div className="qr-preview">
              <h3> Your QR Code</h3>
              <img src={imageUrl} alt="QR Code" />
              <div className="qr-actions">
                <a
                  href={imageUrl}
                  download={`qr-${qrData?.teacherId || "code"}.png`}
                  className="btn-download"
                >
                  ⬇ Download
                </a>
                <button
                  className="btn-refresh"
                  onClick={() => {
                    setImageUrl("");
                    setQrData(null);
                  }}
                >
                   Clear
                </button>
              </div>
              <p className="scan-note">
                Students can now scan this QR (Generated by{" "}
                <strong>{qrData.teacherName}</strong> sir).
              </p>
            </div>
          ) : (
            <div className="qr-empty">
              <img src="/qr-placeholder.png" alt="placeholder" className="placeholder" />
              <small>⚠ QR preview will show here after generation</small>
            </div>
          )}
        </div>
      </div>
      <Footer />
    </>
    

        );
}
